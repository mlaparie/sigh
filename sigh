#!/bin/bash
# Utility script to scrap data from rsoe-edis.org.
# Dependencies: python3, fzf, jq, jtbl, less
# Optional dependencies: bat, rga, kakoune
# 
# Author: matf, inspired from aetin (see gemini://aetin.art/earth.gmi)

VERSION=0.4
WE_DIR="$(dirname "$(readlink -f "$0")")"
FZFOPTS=( --height=100% --layout=reverse --cycle --border --marker='*' )
PGR="less -SN"

# Internal functions
has() {
    case "$(command -v "$1" 2>/dev/null)" in
        alias*|"") return 1
    esac
}

_phi() {
    >&2 printf '    %s\n' "$1"
}

_pht() {
    >&2 printf '%s\n' "$@"
}

_pemx() {
    >&2 printf '\033[31;1mError:\033[m %s\n' "$1"
    exit 1
}

exit_on_error() {
    printf '\033[31;1mErr:\033[0m %s\n' "$1" && exit
}

rgafz() {
	RG_PREFIX="rga --files-with-matches --smart-case --multiline"
	local matchingfiles
	matchingfiles=( "$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
		     fzf --sort --preview="cat {} | jello [[ ! -z {} ]] && rga --pretty --context 2 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="right:80%:wrap:cycle" --delimiter / --with-nth -1 \
                                --bind="ctrl-e:execute(${EDITOR:-vim --not-a-term} {} < /dev/tty > /dev/tty)" \
                                --bind="ctrl-x:execute(kak -e 'execute-keys <%><|>jq<ret><g><e>' {} < /dev/tty > /dev/tty)" \
                                --bind="ctrl-v:execute((cat {} | jtbl -n | ${PGR}) < /dev/tty > /dev/tty)" \
                                --height=100% \
                                --cycle --border --marker='*' --multi --layout=reverse-list \
                                --header=$'[Find text in data files]\n
    Ret  print selection & exit
    C-e  edit hovered
    C-x  edit & beautify hovered
         dep: kakoune
    C-v  view table/json hovered')" )
        if [ -z "${matchingfiles[@]}" ]; then
            exit 0
        else
            printf "${matchingfiles[@]}"
            exit 0
        fi
}
export -f rgafz

findcmd() {
    find . -type f -printf '%f\n' | sort
}

fzfcmd() {
    fzf --ansi \
        --header="$1"$'
    \n    Tab  multi-selection
    Ret  print selection & exit
    C-e  edit hovered
    C-x  edit & beautify hovered
         dep: kakoune
    C-v  view table/json hovered
    C-r  search text in all data
         dep: rga
    ?    toggle preview\n\n' \
        --preview="$2" \
        --preview-window="right:80%:wrap:cycle" --delimiter / --with-nth -1 \
        --bind="?:toggle-preview" \
        --bind="ctrl-r:execute(rgafz)" \
        --bind="ctrl-e:execute(${EDITOR:-vim --not-a-term} {} < /dev/tty > /dev/tty)" \
        --bind="ctrl-x:execute(kak -e 'execute-keys <%><|>jq<ret><g><e>' {} < /dev/tty > /dev/tty)" \
        --bind="$3" \
        --bind="$4" \
        "${FZFOPTS[@]}" \
        "$5"
}
 
quit() {
    exit 0
}

# Main functions
show-help() {
    # Show help
    _pht "sigh, a program to cure optimism. Scrape world disaster events of any type from rsoe-edis.org."
    _pht
    _pht "Usage: $(basename "$0") [OPTION]"
    _pht "       Runs in interactive mode if [OPTION] is not supplied."
    _pht
    _pht "Options:"
    _phi "   -g, --get (TYPE1 TYPE2…)          Scrape data for event type(s) to data/TYPE.json."
    _phi "   -p, --print (TYPE1 TYPE2…)        Print saved json data for queried event type(s)."
    _phi "   -t, --table (TYPE1 TYPE2…)        Print saved data as table for queried event type(s)."
    _phi "   -l, --list-types                  List event types currently known to $(basename "$0")."
    _phi "   -u, --update-types                Upgrade list of available event types."
    _phi "   -R, --remove-data (TYPE1 TYPE2…)  Remove queried data type(s) or all data (confirmation required)."
    _phi "   -s, --setup                       Toggle $(basename "$0") symlink in PATH and prompt for --update-types."
    _phi "   -v, --version                     Print version and full path to working directory."
    _phi "   -h, --help                        Print this help."
    _pht
    _pht "Improve me:"
    _phi "   https://git.teknik.io/matf/sigh"
    _pht
    _phi "   $(basename "$0") depends on its base directory structure. Do not manually move the executable to your PATH."
    _phi "   Use ./$(basename "$0") --setup to create/delete a symbolic link in ~/.local/bin/ instead."
    _pht
}

setup() {
    # Check if $(basename "$0") already in PATH, else create symlink into ~/.local/bin/
    cd "$WE_DIR"/setup 2>/dev/null || exit_on_error "setup/ subdirectory not found. Was sigh moved out of its base folder?"
    ! has sigh && in_path="false"
    if [ "$in_path" == "false" ]; then
       printf '%s is not in your PATH. Create symlink into ~/.local/bin/ to access the command from anywhere? [Y/n] ' "$(basename "$0")" && read -r
       if ! [ "$REPLY" = "n" ] || [ "$REPLY" = "N" ] || \
           [ "$REPLY" = "no" ] || [ "$REPLY" = "NO" ]; then
           ln -s "$WE_DIR"/sigh "$HOME"/.local/bin/sigh
           printf 'Done. \033[32;1m✔\033[0m\n'
       fi
    else
       printf "Remove %s symbolic link from your PATH? [y/N] " "$(basename "$0")" && read -r
       if [ "$REPLY" = "y" ] || [ "$REPLY" = "y" ] || \
           [ "$REPLY" = "yes" ] || [ "$REPLY" = "YES" ]; then
           rm "$HOME"/.local/bin/sigh
           printf 'Done. \033[32;1m✔\033[0m\n'
       fi
   fi
   
    # Merge base type list with currently active types to grow the local list, prompt for symlink creation/deletion
       printf '\nUpgrade the list of event types available to scrape? [Y/n] ' && read -r
       if ! [ "$REPLY" = "n" ] || [ "$REPLY" = "N" ] || \
           [ "$REPLY" = "no" ] || [ "$REPLY" = "NO" ]; then
           update-types
           printf '\nThe %s event types below can be selected from the interface or used directly as arguments:\n' "$(wc -w < types.txt)"
           list-types
       fi
}

get() {
    # Scrape data, use fzf if no type(s) provided
    export WE_DIR
    cd "$WE_DIR"/setup 2>/dev/null || exit_on_error "setup/ subdirectory not found. Was 'sigh' moved out of its base folder?"
    mkdir -p "$WE_DIR"/data
    if [ -z "$1" ]; then
        typ=( $(fzf "${FZFOPTS[@]}" --multi --header=$'[Pick event type(s)]\n\n    Tab  multi-selection\n\n' < types.txt | xargs) )
        for i in "${typ[@]}"
            do printf 'Scraping %s event(s)… ' "$i" && python3 getevents.py -t "$i" 2>/dev/null
        done
        quit
    else
        if [ "$2" == "ALL" ] || [ "$2" == "all" ]; then
             ALL=( $(tr '\n' ' ' < types.txt | xargs) )
                printf '\033[33;1mWrn:\033[0m Please do not abuse this option so that rsoe-edis.org do not set countermeasures against scraping. Type "I promise." to proceed. ' && read -r
                if [ "$REPLY" = "I promise." ]; then
                    start=`date +%s`
                    printf '\nScraping all events, time to brew yourself a coffee…\n'
                    for i in "${ALL[@]}"
                    do printf 'Scraping %s event(s)… ' "$i" && python3 getevents.py -t "$i" 2>/dev/null
                    done
                    end=`date +%s`
                    runtime=$((end-start))
                    printf 'Finished scraping all events in %s s.\n' "$runtime"
                else
                    quit
                fi
        else
            typ=( $(echo "$@" | tr '[:lower:]' '[:upper:]' | xargs) )
            unset 'typ[0]' ; unset 'typ[-1]'
            if [ "${#typ[@]}" -eq "0" ]; then
                get
            fi
            for i in "${typ[@]}"
                do printf 'Scraping %s event(s)… ' "$i" && python3 getevents.py -t "$i" 2>/dev/null
            done
        fi
    fi
}

print() {
    # Show scraped data as json, use fzf if no type provided
    cd "$WE_DIR"/data 2>/dev/null || exit_on_error "no data scraped yet. Run $(basename "$0") -g first."
    if [ -z "$1" ]; then
        ndata="$(findcmd | wc -l)"
        if [ "$ndata" -eq "0" ]; then
            exit_on_error "no data scraped yet. Run $(basename "$0") -g first."
        else
            typ=( $(findcmd | fzfcmd "[Print data file(s)]" "${PGR} {} | jq" "ctrl-p:execute((cat {} | jq) < /dev/tty > /dev/tty)+abort" "ctrl-v:execute((cat {} | jtbl -n | ${PGR}) < /dev/tty > /dev/tty)" "--multi") )
            for i in "${typ[@]}"
                do printf '\n%s\n--------\n' "$i"
                jq < "$i"
            done
            quit
        fi
    else
        typ=( $(echo "$@" | tr '[:lower:]' '[:upper:]' | xargs) )
        unset 'typ[0]' ; unset 'typ[-1]'
        if [ "${#typ[@]}" -eq "0" ]; then
            print
        fi
        for i in "${typ[@]}"
            do printf '\n%s\n--------\n' "$i.json"
               jq < "$i".json 2>/dev/null
            if ! [ -f "$i.json" ]; then
               printf ' \033[31;1mErr:\033[0m %s\n' "no data scraped for $i yet. Run $(basename "$0") -g $i first."
            fi
        done
    fi
}

table() {
    # Show scraped data as table, use fzf if no type provided
    cd "$WE_DIR"/data 2>/dev/null || exit_on_error "no data scraped yet. Run $(basename "$0") -g first."
    if [ -z "$1" ]; then
        ndata="$(findcmd | wc -l)"
        if [ "$ndata" -eq "0" ]; then
            exit_on_error "no data scraped yet. Run $(basename "$0") -g first."
        else
            typ=( $(findcmd | fzfcmd "[Print data as table(s)]" "cat {} | jtbl -t | ${PGR}" "ctrl-p:execute((cat {} | jtbl -t) < /dev/tty > /dev/tty)+abort" "ctrl-v:execute((cat {} | jq | ${PGR}) < /dev/tty > /dev/tty)" "--multi") )
            for i in "${typ[@]}"
                do printf '\n%s\n--------\n' "$i"
                jtbl -n < "$i"
            done
            quit
        fi
    else
        typ=( $(echo "$@" | tr '[:lower:]' '[:upper:]' | xargs) )
        unset 'typ[0]' ; unset 'typ[-1]'
        if [ "${#typ[@]}" -eq "0" ]; then
            table
        fi
        for i in "${typ[@]}"
            do printf '\n%s\n--------\n' "$i.json"
               jtbl -t < "$i".json 2>/dev/null
            if ! [ -f "$i.json" ]; then
               printf ' \033[31;1mErr:\033[0m %s\n' "no data scraped for $i yet. Run $(basename "$0") -g $i first."
            fi
        done
    fi
}

find-text() {
    cd "$WE_DIR"/data 2>/dev/null || exit_on_error "no data scraped yet. Run $(basename "$0") -g first."
    rgafz
    printf "Not implemented yet.\n"
}

list-types() {
    # List available types
    tr '\n' '\t' < "$WE_DIR"/setup/types.txt | fold -w 80 -s
    printf "\n"
}

update-types() {
    export WE_DIR
    printf 'Fetching current types… '
    python3 "$WE_DIR"/setup/getnewtypes.py
}

remove-data() {
    # Remove scrap scripts
    cd "$WE_DIR"/data 2>/dev/null || exit_on_error "no data scraped yet. Run $(basename "$0") -g first."
    if [ -z "$1" ]; then
        ndata="$(findcmd | wc -l)"
        if [ "$ndata" -eq "0" ]; then
           exit_on_error "nothing to delete."
        else
            printf '\033[33;1mWrn:\033[0m %s' "[r]emove $(findcmd 2>/dev/null | wc -l) data files, [c]herry pick, or [a]bort? " && read -r
            if [ "$REPLY" = "a" ] || [ "$REPLY" = "A" ] || [ "$REPLY" = "" ]; then
                printf 'Aborted.'
            elif [ "$REPLY" = "r" ] || [ "$REPLY" = "R" ]; then
                printf 'This action cannot be undone and data will be lost. Type YES to confirm. ' && read -r
                if [ "$REPLY" = "YES" ]; then
                    find . -type f -name '*.json' -delete 2>/dev/null
                    printf '\033[32;1m✔\033[0m %s/data/ directory cleaned.\n' "${WE_DIR}"
                else
                    printf 'Aborted.'
                fi
            elif [ "$REPLY" = "c" ] || [ "$REPLY" = "C" ]; then
                typ=( $(findcmd | fzf "${FZFOPTS[@]}" --multi --header=$'[Remove data file(s)]\n\n    Tab  multi-selection\n\n' | xargs) )
                for i in "${typ[@]}"
                    do rm "$i"
                done
                printf 'Removed %s data files. \033[32;1m✔\033[0m\n' "${#typ[@]}"
                quit
            fi 
        fi
    else
        typ=( $(echo "$@" | tr '[:lower:]' '[:upper:]' | xargs) )
        unset 'typ[0]' ; unset 'typ[-1]'
        if [ "${#typ[@]}" -eq "0" ]; then
            remove-data
            quit
        fi
        printf '\033[33;1mWrn:\033[0m %s' "remove ${#typ[@]} data files? This action cannot be undone and data will be lost. [Y/n] " && read -r
        if [ "$REPLY" = "n" ] || [ "$REPLY" = "N" ] || [ "$REPLY" = "no" ] || [ "$REPLY" = "NO" ]; then
            quit
        else
            printf 'This cannot be undone. Type YES to confirm. ' && read -r
            if [ "$REPLY" = "YES" ]; then
                for i in "${typ[@]}"; do
                    if ! [ -f "$i" ]; then
                        printf ' \033[31;1mErr:\033[0m %s\n' "no $i data to delete."
                    else
                        rm "$i" 2>/dev/null
                        printf 'Removed %s.data \033[32;1m✔\033[0m\n' "$i"
                    fi
                done
                quit
            fi
        fi
    fi
}

interactive() {
    # Use fzf to manipulate program options
    cmd=$(echo "get print table find-text list-types setup update-types remove-data version show-help quit" \
    | tr ' ' '\n' | fzf "${FZFOPTS[@]}")
    eval "$cmd"
}

version() {
    # Print version and working directory
    _pht "$(basename "$0") $VERSION"
    _pht "Working directory: $WE_DIR/"
}

# Dependency check
for prog in python3 fzf jello jtbl less; do
     ! has "$prog" && dependencies_not_installed="${dependencies_not_installed}${prog}, "
done

[ -n "${dependencies_not_installed}" ] && _pemx "missing dependencies, please install: ${dependencies_not_installed%??}."

# Options
if [ -z "$1" ]; then
    interactive ;
fi

    case "$1" in
    "-g"|"--get")
        get "$@" "$WE_DIR" ; exit ;;
    "-p"|"--print")
        print "$@" "$WE_DIR" ; exit ;;
    "-t"|"--table")
        table "$@" "$WE_DIR" ; exit ;;
    "-f"|"--find-text")
        find-text "$@" "$WE_DIR" ; exit ;;
    "-l"|"--list-types")
        list-types "$WE_DIR" ; exit ;;
    "-s"|"--setup")
        setup "$WE_DIR" ; exit ;;
    "-u"|"--update-types")
        update-types "$WE_DIR" ; exit ;;
    "-R"|"--remove-data")
        remove-data "$@" "$WE_DIR" ; exit ;;
    "-i"|"--interactive")
        interactive "$WE_DIR" ; exit ;;
    "-v"|"--version")
        version "$WE_DIR" ; exit 0 ;;
    "-h"|"--help")
        show-help ; exit 0 ;;
    -*)
        _pemx "$1 is not a supported option." ;;
    *)
        quit ;;
esac
